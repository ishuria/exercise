//4.3.3
void lrd(BiTree &t){
    BiNode* p=t;
    BiNode* lastVisit;
    InitStack(s);
    Push(s,p);
    while(p||!s.StackEmpty()){
        if(p!=null){
            s.push(p);
            p=p->lchild;
        }
        else{
            GetTop(s,p);
            if(p->rchild!=null&&p->rchild!=lastVisit){
                p=p->rchild;
                Push(s,p);
                p=p->lchild;
            }
            else{
                Pop(s,p);
                visit(p);
                lastVisit=p;
                p=null;
            }
        }
    }
}

//4.3.4
void reverse(BiTree T){
    InitStack(S);
    InitQueue(Q);
    p=T;
    EnQueue(Q,p);
    while(!IsEmpty(Q)){
        DeQueue(Q,p);
        Push(S,p);
        if(p->lchild!=null){
            EnQueue(Q,p->lchild);
        }
        if(p->rchild!=null){
            EnQueue(Q,p->rchild);
        }
    }
    while(!IsEmpty(S)){
        Pop(S,p);
        visit(p)
    }
}

//4.3.5
void height(BiTree T){
    int max = 0;
    p=T;
    BiNode* lastVisit;
    InitStack(S);
    Push(S,p);
    while(p||!IsEmpty(S)){
        if(p->lchild!=null){
            Push(S,p);
            if(StackLength(S)>max){
                max++;
            }
            p=p->lchild;
        }
        else{
            GetTop(S,p);
            if(p->rchild!=null&&lastVisit!=p->rchild){
                p=p->rchild;
                Push(S,p);
                if(StackLength(S)>max){
                    max++;
                }
                p=p->lchild;
            }
            else{
                Pop(S,p);
                lastVisit=p;
                p=null;
            }
        }
    }
}

//4.3.6
//先序：ABCDEFG
//中序：CBEDFAG
void genTree(int* pre,int* mid,int size,BiTree &T){
    BiNode *p = (BiNode*)malloc(sizeof(BiNode));
    T->data=pre[0];
    //根节点在中序中的位置
    int rootMid=-1;
    for(int i=0;i<size;i++){
        if(pre[0]=mid[i]){
            rootMid=i;
        }
    }
    //右子树的根节点在先序中的位置
    for(int i=0;i<size;i++){
        if(pre[i]=mid[rootMid+1]){
            rootMid=i;
        }
    }
    BiNode *left = (BiNode*)malloc(sizeof(BiNode));
    BiNode *right = (BiNode*)malloc(sizeof(BiNode));
    T->lchild=left;
    T->rchild=right;
    //生成左子树
    genTree(pre[1],mid,rootMid-1,left);
    //生成右子树
    genTree(pre[rootMid+1],mid[rootMid+1],size-rootMid,right);
}

//4.3.7
bool IsCompleteBiTree(BiTree &T){
    InitQueue(Q);
    p=T;
    EnQueue(p);
    bool checkLeaf=false;
    while(!IsEmpty(Q)){
        DeQueue(Q,p);
        if(p->lchild==null&&p->rchild!=null){
            return false;
        }
        if(checkLeaf){
            if(p->lchild!=null||p->rchild!=null){
                return false;
            }
        }
        else{
            if((p->lchild!=null&&p->rchild==null)
                ||(p->lchild==null&&p->rchild==null)){
                checkLeaf=true;
            }
        }
        if(p->lchild!=null){
            EnQueue(Q,p->lchild);
        }
        if(p->rchild!=null){
            EnQueue(Q,p->rchild);
        }
    }
}

//4.3.8
int calcDouble(BiTree &T){
    InitQueue(Q);
    p=T;
    int count=0;
    EnQueue(Q,p);
    while(!IsEmpty(Q)){
        DeQueue(Q,p);
        if(p->lchild!=null&&p->rchild!=null){
            count++;
        }
        if(p->lchild!=null){
            EnQueue(Q,p->lchild);
        }
        if(p->rchild!=null){
            EnQueue(Q,p->rchild);
        }
    }
    return count;
}

//4.3.9
void reverse(BiTree &T){
    InitQueue(Q);
    p=T;
    EnQueue(Q,p);
    while(IsEmpty(Q)){
        DeQueue(Q,p);
        if(p->lchild!=null){
            EnQueue(Q,p->lchild);
        }
        if(->rchild!=null){
            EnQueue(Q,p->rchild);
        }
        //交换P的左右子节点
        BiNode *temp;
        temp=p->lchild;
        p->lchild=p->rchild;
        p->rchild=temp;
    }
}

//4.3.10
void preK(BiTree &T,int k){
    InitStack(S);
    int count=0;
    p=T;
    while(p!=null||!IsEmpty(S)){
        if(p!=null){
            visit(p);
            if(count==k-1){
                return p->data;
            }
            Push(S,p);
            p=p->lchild;
        }
        else{
            Pop(S,p);
            p=p->rchild;
        }
    }
    return -1;
}

//4.3.11
void preDelete(BiTree &T,int x){
    InitStack(S);
    InitQueue(Q);
    p=T;
    temp=null;
    while(p!=null||!IsEmpty(S)){
        if(p!=null){
            if(p->data==x){
                //删除以该节点为根的树
                temp=p;
                EnQueue(temp);
                while(!IsEmpty(Q)){
                    DeQueue(Q,temp);
                    if(temp->lchild!=null){
                        EnQueue(Q,temp->lchild);
                    }
                    if(temp->rchild!=null){
                        EnQueue(Q,temp->rchild);
                    }
                    free(temp);
                }
                p=null;
            }
            else{
                Push(S,p);
                p=p->lchild;
            }
        }
        else{
            Pop(S,p);
            p=p->rchild;
        }
    }
}

//4.3.12
void printX(BiTree &T,int x){
    InitStack(S);
    p=T;
    while(p!=null||!IsEmpty(S)){
        if(p!=null){
            if(p->data==x){
                while(!IsEmpty(S)){
                    Pop(S,p);
                    print(p->data);
                }
                return;
            }
            else{
                Push(S,p);
                p=p->lchild;
            }
        }
        else{
            Pop(S,p);
            p=p->rchild;
        }
    }
}

//4.3.13
void FindCommonAncestor(BiTree &T,BiNode *p,BiNode q){
    if(p==T||q==T){
        return T;
    }
    BiNode lCommon = FindCommonAncestor(T->lchild,p,q);
    BiNode rCommon = FindCommonAncestor(T->rchild,p,q);
    if(lCommon!=null&&rCommon!=null){
        return T;
    }
    else if(lCommon!=null){
        return lCommon;
    }
    else{
        return rCommon;
    }
}

//4.3.14
void FindMaxWidth(BiTree &T){

}

//4.3.15
int* FindPost(int* pre,int size){
    int root=pre[0];
    int* leftPost=FindPost(pre[1],size/2);
    int* rightPost=FindPost(pre[1+size/2],size/2);
    for(int i=0;i<size-1;i++){
        pre[i]=pre[i+1];
    }
    pre[size-1]=root;
    return pre;
}

//4.3.16
BiNode* LinkLeafNode(BiTree &T){
    InitStack(S);
    q=T;
    listRoot=null;
    prev=null;
    while(q!=null||!IsEmpty(S)){
        if(q!=null){
            Push(S,q);
            if(q->lchild==null&&q->rchild==null){
                if(listRoot==null){
                    listRoot = q;
                    prev = q;
                }
                else{
                    prev->rchild=q;
                    prev=q;
                }
            }
            q=q->lchild;
        }
        else{
            Pop(S,q);
            q=q->rchild;
        }
    }
    return listRoot;
}

//4.3.17
bool IsSimilar(BiTree &T1,BiTree &T2){
    if(T1==null&&T2==null){
        return true;
    }
    if(T1->lchild==null&&T1->rchild
        &&T2->lchild==null&&T2->rchild){
        return true;
    }
    return IsSimilar(T1->lchild,T2->lchild)&&IsSimilar(T1->rchild,T2->rchild);
}

//4.3.18


//4.3.19
int CalcWPL(BiTree &T){
    InitStack(S);
    p=T;
    r=null;
    int wpl=0;
    while(p!=null||!IsEmpty(S)){
        if(p!=null){
            Push(S,p);
            p=p->lchild;
        }
        else{
            GetTop(S,p);
            if(p->rchild==null){
                wpl+=p->weight*StackLength(S);
            }
            if(p->rchild!=null&&p->rchild!=r){
                p=p->rchild;
                Push(S,p);
                p=p->lchild;
            }
            else{
                Pop(S,p);
                r=p;
                p=null;
            }
        }
    }
    return wpl;
}

//4.3.20
void GenExpression(BiTree &T){
    // InitStack(S);
    // p=T;
    // while(p!=null||!IsEmpty(S)){
    //     if(p!=null){
    //         Push(S,p);
    //         p=p->lchild;
    //     }
    //     else{
    //         Pop(S,p);
    //         visit(p);
    //         p=p->rchild;
    //     }
    // }
    if(T->lchild==null&&T->rchild==null){
        return T->data;
    }
    else if(T->lchild!=null&&T->rchild==null){
        return GenExpression(T->lchild)+T->data;
    }
    else if(T->lchild==null&&T->rchild!=null){
        return T->data+GenExpression(T->rchild);
    }
    else{
        return GenExpression(T->lchild)+T->data+GenExpression(T->rchild);
    }
}

//二叉搜索树操作
//二叉树结构
typedef struct BSTreeNode 
{
    struct BSTreeNode *_left;
    struct BSTreeNode *_right;
    DataType _data;
}BSTreeNode;
//二叉树节点创建
BSTreeNode *BuyTreeNode(DataType x) //创建节点
{
    BSTreeNode *node = (BSTreeNode*)malloc(sizeof(BSTreeNode));
    assert(node);

    node->_data = x;
    node->_left = NULL;
    node->_right = NULL;

    return node;
}
//搜索二叉树的插入
//非递归代码
int BSTreeNodeInsert(BSTreeNode **pptree,DataType x) //搜索树的插入
{
    BSTreeNode *parent = NULL;
    BSTreeNode *cur = *pptree;
    if (*pptree == NULL)
    {
        *pptree = BuyTreeNode(x);
        return 0;
    }
    while (cur)
    {
      parent = cur;
      if (cur->_data > x)
          cur = cur->_left;
      else if (cur->_data < x)
          cur = cur->_right;
      else
          return -1;
    }

    if (parent->_data > x)
        parent->_left = BuyTreeNode(x);
    else 
        parent->_right = BuyTreeNode(x);

    return 0;
}
//递归代码
int BSTreeNodeInsertR(BSTreeNode **tree,DataType x) //搜索树的插入
{
    if(*tree == NULL)
    {
        *tree = BuyTreeNode(x);
        return 0;
    }

    if ((*tree)->_data > x)
        return BSTreeNodeInsertR(&(*tree)->_left,x);
    else if ((*tree)->_data < x)
        return BSTreeNodeInsertR(&(*tree)->_right,x);
    else
        return -1;
}
//搜索二叉树的查找
//非递归代码
BSTreeNode *BSTreeNodeFind(BSTreeNode *tree,DataType x) //查找
{
    while (tree)
    {
        if (tree->_data == x)
            return tree;
        else if (tree->_data < x)
            tree = tree->_right;
        else 
            tree = tree->_left;
    }

    return NULL;
}
//递归代码
BSTreeNode *BSTreeNodeFindR(BSTreeNode *tree,DataType x) //查找
{
    if (!tree)
        return NULL;

    if (tree->_data > x)
        BSTreeNodeFindR(tree->_left,x);
    else if (tree->_data < x)
        BSTreeNodeFindR(tree->_right,x);
    else
        return tree;
}
//搜索二叉树的删除
int BSTreeNodeDel(BSTreeNode **tree,DataType x) //删除
{

    BSTreeNode *cur = *tree;
    BSTreeNode *parent = *tree;
    BSTreeNode *del = NULL;

    while (cur)
    {
        if (cur->_data > x)
        {
            parent = cur;
            cur = cur->_left;
        }
        else if (cur->_data < x)
        {
            parent = cur;
            cur = cur->_right;
        }
        else
        {
            del = cur;

            if (cur->_left == NULL) //1、左孩子为空
            {
                if (parent->_left == cur)
                    parent->_left = cur->_right;
                else if (parent->_right == cur)
                    parent->_right = cur->_right;
                else if (parent == cur) //没有父亲节点时
                   *tree = parent->_right;
            }
            else if (cur->_right == NULL) //2、右孩子为空
            {
                if (parent->_left == cur)
                    parent->_left = cur->_left;
                else if (parent->_right == cur)
                    parent->_right = cur->_left;
                else if (parent == cur) //没有父亲节点时
                    *tree = parent->_left;
            }
            else//3、左右孩子都不为空
            {
                BSTreeNode *sub = cur->_right;
                while (sub->_left)
                {
                    parent = sub;
                    sub = sub->_left;
                }

                del = sub;
                cur->_data = sub->_data;

                if (parent->_left == sub)
                    parent->_left = sub->_right;
                else 
                    parent->_right = sub->_right;
            }

            free(del);
            del = NULL;
            return 0;

        }
    }

    return -1;
}
